#!/usr/bin/env bash
source /shared/bash-setup

if [[ -z "${DCMD_NAME:-}" ]]; then
    echo "DCMD_NAME must be set" >&2
    exit 1
fi

if [[ -z "${DCMD_IMAGE:-}" ]]; then
    echo "DCMD_IMAGE must be set" >&2
    exit 1
fi

# If the DCMD_EXECUTABLE is set it means that we are invoked by ./executable
# This means that we can assume volumes are mounted etc.
if [[ -n "${DCMD_EXECUTABLE:-}" ]]; then
  if [[ -z "${DCMD_HOME:-}" ]]; then
      echo "DCMD_HOME must be set" >&2
      exit 1
  fi

  # If the home directory doesn't exist it means that docker was started with the --user flag
  # This is done on linux to make sure that files written from within the container gets owned by the current user
  # instead of root.
  # In this case we need to change the ownership of all volumes mounted into $DCMD_HOME to the current user, and
  # symlink $DCMD_HOME to the user's $HOME. This is to make sure that for example ~/.ssh/config etc is loaded properly
  if [[ ! -d "$HOME" ]]; then
    sudo chown -R "$(id -u -n):$(id -g -n)" "${DCMD_HOME}"
    sudo ln -s "${DCMD_HOME}" "$HOME"
  fi

  # The openssh in OSX has special parameters not supported by openssh in Linux
  # Prepend IgnoreUnknown-conf to the ~/.ssh/config if the execute script has detected OSX
  if [[ -f "$HOME/.ssh/config.original" ]]; then
    printf "IgnoreUnknown AddKeysToAgent,UseKeychain\n" >| "$HOME/.ssh/config"
    cat "$HOME/.ssh/config.original" >> "$HOME/.ssh/config"
  fi
fi

EXECUTABLE="/usr/local/bin/${DCMD_NAME}"
[[ ! -f "${EXECUTABLE}" ]] && sudo ln -s /entrypoint "${EXECUTABLE}"

CMD_PATH="/dcmd"
CMD_NAME="${DCMD_NAME}"

# Print help and exit if "--help" is the first option
if [[ "${1:-}" == "--help" ]]; then
    dcmd help
    exit 0
fi

while (($#)); do
    GLOBAL_OPT_PATH="${CMD_PATH}/.options"
    if [[ -f "${GLOBAL_OPT_PATH}" ]]; then

        IFS=$'\n'
        for OPT_LINE in $(${GLOBAL_OPT_PATH}); do
            IFS=' '
            declare -a OPT_COLUMNS
            OPT_COLUMNS=(${OPT_LINE})
            if [[ ${#OPT_COLUMNS[@]} -lt 4 ]]; then
                echo ".options must output lines with at least 4 items separated by space"
                echo "Example: DRY_RUN -d --dry-run Do a dry run"
                echo "Invalid line: ${OPT_LINE}"
                exit 1
            fi

            VAR_NAME="${OPT_COLUMNS[0]}"
            OPT="${OPT_COLUMNS[1]}"
            LONGOPT="${OPT_COLUMNS[2]}"
            USAGE="${OPT_COLUMNS[@]:3}"
            LONGOPT_NOPARAM="$(echo "${LONGOPT}" | sed 's/:$//g')"
            PARAM=""
            if [[ "${LONGOPT}" != "${LONGOPT_NOPARAM}" ]]; then
                PARAM="y"
            fi

            export ${VAR_NAME}=""
            POSITIONAL=()
            while [[ $# -gt 0 ]]; do
                case $1 in
                    ${OPT}|${LONGOPT_NOPARAM})
                    if [[ -z "${PARAM}" ]]; then
                        export ${VAR_NAME}="y"
                    else
                        export ${VAR_NAME}="$2"
                        shift
                    fi
                    shift
                    ;;
                    *)
                    POSITIONAL+=("$1")
                    shift
                    ;;
                esac
            done
            set -- "${POSITIONAL[@]}"
        done
        unset IFS
    fi

    NEXT_CMD_PATH="${CMD_PATH}/$1"
    if [[ -d "${NEXT_CMD_PATH}" ]]; then
        CMD_PATH="${NEXT_CMD_PATH}"
        CMD_NAME="${CMD_NAME} $1"
        shift
    elif [[ -f "${NEXT_CMD_PATH}" ]]; then
        CMD_PATH="${NEXT_CMD_PATH}"
        CMD_NAME="${CMD_NAME} $1"
        shift
        break
    else
        break
    fi
done

# Print the help if the selected command is a folder
if [[ -d "${CMD_PATH}" ]]; then
    dcmd meta help "${CMD_PATH}" "${CMD_NAME}"
fi

# Error out if selected command is a non-executable file
if [[ -f "${CMD_PATH}" && ! -x "${CMD_PATH}" ]]; then
    echo "error: Unknown command \"${CMD_NAME}\""
    exit 1
fi

# Exit if the selected command does not exist
if [[ ! -f "${CMD_PATH}" ]]; then
    # Return exit code 1 and error message if unconsumed arguments still exist
    if [[ ! -z "${1:-}" ]]; then
        echo ""
        if [[ ${1:0:1} == "-" ]]; then
            echo "error: Unknown option \"${CMD_NAME} $1\""
        else
            echo "error: Unknown command \"${CMD_NAME} $1\""
        fi
        exit 1
    fi
    exit 0
fi

${CMD_PATH} "$@"
