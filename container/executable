#!/usr/bin/env bash
set -o pipefail

# Exit if all prerequisites are not met
if [[ -z "${DCMD_NAME}" ]]; then
    echo "DCMD_NAME must be set" >&2
    exit 1
fi

if [[ -z "${DCMD_IMAGE}" ]]; then
    echo "DCMD_IMAGE must be set" >&2
    exit 1
fi

if [[ ! $(command -v docker) ]]; then
    echo "docker is required to run ${DCMD_NAME}. Please install docker and make sure it's available on your PATH" >&2
    exit 1
fi

if [[ $(docker version 2>&1 > /dev/null) ]]; then
    echo "docker must be executable by the current user to run ${DCMD_NAME}. Please make sure the current user can run docker (without sudo)" >&2
    exit 1
fi

# Create config dir in ~/.config
CONFIG_DIR="$HOME/.config/${DCMD_NAME}"
mkdir -p "${CONFIG_DIR}"

LAST_UPDATE_CHECK_FILE="${CONFIG_DIR}/last-update-check"
UPDATE_LOG_FILE="${CONFIG_DIR}/update.log"
LAST_UPDATE_FAILED_FILE="${CONFIG_DIR}/last-update-failed"

# Increment fail count in LAST_UPDATE_FAILED_FILE
__update_dcmd_failed() {
    if [[ ! -f "${LAST_UPDATE_FAILED_FILE}" ]]; then
        echo "1" > "${LAST_UPDATE_FAILED_FILE}"
        return 0
    fi

    FAIL_COUNT=$(cat "${LAST_UPDATE_FAILED_FILE}")
    echo $((${FAIL_COUNT} + 1)) > "${LAST_UPDATE_FAILED_FILE}"
}

# Update dcmd by pulling new image and replacing executable with result of "dcmd meta create-executable"
# Increments fail count on error and resets it on success
__update_dcmd() {
    echo "Updating ${DCMD_NAME}..."
    echo "Pulling image ${DCMD_IMAGE}..."

    docker pull "${DCMD_IMAGE}"
    if [[ $? != 0 ]]; then
        echo "error: Update failed. Could not pull docker image" >&2
        __update_dcmd_failed
        return 1
    fi

    CURRENT_EXECUTABLE="${BASH_SOURCE[0]}"
    if [[ ! -f "${CURRENT_EXECUTABLE}" ]]; then
        echo "error: Update failed, could not locate current executable" >&2
        __update_dcmd_failed
        return 1
    fi
    TARGET_EXECUTABLE_CONTENT="$(docker run --rm -i "${DCMD_IMAGE}" meta create-executable)"
    if [[ -z "${TARGET_EXECUTABLE_CONTENT}" ]] || [[ "$(echo "${TARGET_EXECUTABLE_CONTENT}" | wc -l)" -lt 10 ]]; then
        echo "error: Update failed, could get new executable" >&2
        __update_dcmd_failed
        return 1
    fi

    echo "${TARGET_EXECUTABLE_CONTENT}" > "${CURRENT_EXECUTABLE}"
    if [[ $? != 0 ]]; then
        echo "error: Update failed. Could not write new executable" >&2
        __update_dcmd_failed
        return 1
    fi

    echo "Update done"

    # Reset failure count on error
    if [[ -f "${LAST_UPDATE_FAILED_FILE}" ]]; then
        rm "${LAST_UPDATE_FAILED_FILE}"
    fi
    return 0
}

# Run update in foreground if "dcmd meta update" is called
if [[ "$1 $2" == "meta update" ]]; then
    __update_dcmd | tee "${UPDATE_LOG_FILE}"
    exit $?
fi

# Run a silent update every hour, outputting logs into UPDATE_LOG_FILE
if [[ -z "${DCMD_DISABLE_UPDATE:-}" ]] && [[ ! -f "${LAST_UPDATE_CHECK_FILE}" || $(($(date +%s)-$(cat "${LAST_UPDATE_CHECK_FILE}"))) -gt $((60*60)) ]]; then
    echo "$(date +%s)" > "${LAST_UPDATE_CHECK_FILE}"
    # Run update as background job
    __update_dcmd > "${UPDATE_LOG_FILE}" 2>&1 &
fi

# Warn if update failed more than twice in a row, then reset failure count
if [[ -f "${LAST_UPDATE_FAILED_FILE}" ]]; then
    FAIL_COUNT=$(cat "${LAST_UPDATE_FAILED_FILE}")
    if [[ ${FAIL_COUNT} -gt 1 ]]; then
        echo "info: Last update of ${DCMD_NAME} failed. Run \"${DCMD_NAME} meta update\" or check ${UPDATE_LOG_FILE} for details." >&2
        rm "${LAST_UPDATE_FAILED_FILE}"
    fi
fi

# Used to find the users home dir inside the container
# DCMD_EXECUTABLE_EXTRAS_PLACEHOLDER depends on this
DCMD_HOME="/root"

# Run as current user if current user has uid:guid 1000:1000
if [[ "$(id -u)" == "1000" && "$(id -g)" == "1000" ]]; then
   USER_OPTIONS="--user 1000:1000"
   DCMD_HOME="/home/dcmd"
elif [[ "$OSTYPE" == "linux-gnu" ]]; then
    echo "warn: uid doesn't match container. Files written from container will be owned by root" >&2
fi

# Mount docker socket into container if available
DOCKER_SOCKET_OPTIONS=""
if [[ -S "/var/run/docker.sock" ]]; then
    DOCKER_SOCKET_OPTIONS="--volume /var/run/docker.sock:/var/run/docker.sock"
fi

# Mount .ssh/config into container if available
SSH_CONFIG=""
if [[ -f "$HOME/.ssh/config" ]]; then
    SSH_CONFIG="--volume $HOME/.ssh/config:${DCMD_HOME}/.ssh/config"
fi

# Mount .ssh/known_hosts into container if available
SSH_KNOWN_HOSTS_OPTIONS=""
if [[ -f "$HOME/.ssh/known_hosts" ]]; then
    SSH_KNOWN_HOSTS_OPTIONS="--volume $HOME/.ssh/known_hosts:${DCMD_HOME}/.ssh/known_hosts"
fi

# Mount ssh-agent into container if available
SSH_AGENT_OPTIONS=""
if [[ ! -z "${SSH_AUTH_SOCK:-}" ]]; then
    SSH_AGENT_OPTIONS="--volume ${SSH_AUTH_SOCK}:/ssh-agent --env SSH_AUTH_SOCK=/ssh-agent"
fi

# DCMD_EXECUTABLE_EXTRAS_PLACEHOLDER - This line will be replaced by the contents of /.executable-extras in the container

# Tell docker whether we are running in a tty or not
TTY=""
if [[ -t 1 && -t 0 ]]; then
  TTY="-t"
fi

# Check if system supports a way to open things like urls, files etc. and if netcat is avaialble
# to recieve the open commands.
XDG_OPEN_COMMAND=""
if [[ $(command -v nc) ]]; then
  if [[ $(command -v xdg-open) ]]; then
    XDG_OPEN_COMMAND="xdg-open"
  elif [[ $(command -v open) ]]; then
    XDG_OPEN_COMMAND="open"
  fi
fi

# Listen for open commands from within the container with netcat and execute the open-command
XDG_OPEN_OTIONS=""
if [[ -n "${XDG_OPEN_COMMAND}" ]]; then
  function __get_available_port(){
      LOWER_PORT=32768
      UPPER_PORT=60999

      while true; do
          PORT="$((LOWER_PORT + (RANDOM % UPPER_PORT)))"

          nc -z localhost "${PORT}"
          if [[ $? != 0 ]]; then
              echo ${PORT}
              return 0
          fi
      done
  }

  XDG_OPEN_PORT="$(__get_available_port)"

  # Start a netcat listener that triggers open-command for each line received. Needs to be in its
  # own shell to make sure we can reliably kill it and its decendants when doing cleanup.
  bash -c "nc -lk ${XDG_OPEN_PORT} | while IFS= read -r line; do ${XDG_OPEN_COMMAND} \$line; done" &
  XDG_PID=$!

  # Disown the background job so we don't get messages printed when it exits
  disown

  # Trap the exit signal and stop the listener when the dcmd-command exits
  __xdg_open_listener_cleanup() {
    __xdg_open_listener_cleanup_background() {
      # Get the process group id of the listener, to be able to kill all decendants
      PGID="$(ps -o pgid=" " ${XDG_PID} | grep -o "[0-9]*")"

      # Wait a while since there might be things in the pipe not xdg-opened yet
      sleep 5

      # Kill the listener and all its decendants
      kill -- "-${PGID}" 2> /dev/null
    }

    # Do the cleanup in the background so the current terminal is not blocked
    __xdg_open_listener_cleanup_background &
    disown
  }
  trap __xdg_open_listener_cleanup EXIT

  # Set the XDG_OPEN_PORT env var which will be picked up from within the container
  XDG_OPEN_OTIONS="--env XDG_OPEN_PORT=${XDG_OPEN_PORT}"
fi

docker run -i ${TTY} \
    ${DCMD_EXTRA_DOCKER_OPTIONS} \
    ${DOCKER_SOCKET_OPTIONS} \
    ${SSH_CONFIG} \
    ${SSH_KNOWN_HOSTS_OPTIONS} \
    ${SSH_AGENT_OPTIONS} \
    ${USER_OPTIONS} \
    ${XDG_OPEN_OTIONS} \
    --volume "$(pwd):/cwd" \
    "${DCMD_IMAGE}" "$@"
